// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Payments.Infrastructure.Persistence;

#nullable disable

namespace Payments.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230330061501_TransferTransactionStatusUpdated")]
    partial class TransferTransactionStatusUpdated
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Payments.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentStatistic", b =>
                {
                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tab")
                        .HasColumnType("text");

                    b.Property<decimal>("ForPayment")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Paid")
                        .HasColumnType("numeric");

                    b.HasKey("CompanyId", "Tab");

                    b.ToTable("PaymentStatistics");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PlaidTransfer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Buyer")
                        .HasColumnType("boolean");

                    b.Property<int>("PlaidTransferEventType")
                        .HasColumnType("integer");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("TransactionStatusUpdated")
                        .HasColumnType("boolean");

                    b.Property<string>("TransferId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("PlaidTransfers");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PlaidTransfersEventSync", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("lastEventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PlaidTransfersEventSync");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PostponedPayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Paid")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("PayDate")
                        .HasColumnType("date");

                    b.Property<long>("PostponedPaymentInfoId")
                        .HasColumnType("bigint");

                    b.Property<int>("PostponedPaymentType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PostponedPaymentInfoId");

                    b.ToTable("PostponedPayments");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PostponedPaymentInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("PostponedPaymentInfo");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("Money");

                    b.Property<long>("BillId")
                        .HasColumnType("bigint");

                    b.Property<long>("BuyerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SellerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("SellerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PaymentStatistic", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Company", "Company")
                        .WithMany("PaymentStatistics")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PlaidTransfer", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Transaction", "Transaction")
                        .WithMany("PlaidTransfers")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PostponedPayment", b =>
                {
                    b.HasOne("Payments.Domain.Entities.PostponedPaymentInfo", "PostponedPaymentInfo")
                        .WithMany("Payments")
                        .HasForeignKey("PostponedPaymentInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostponedPaymentInfo");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PostponedPaymentInfo", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Payments.Domain.Entities.Company", "Buyer")
                        .WithMany("Buy")
                        .HasForeignKey("BuyerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Payments.Domain.Entities.Company", "Seller")
                        .WithMany("Sell")
                        .HasForeignKey("SellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Buyer");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Company", b =>
                {
                    b.Navigation("Buy");

                    b.Navigation("PaymentStatistics");

                    b.Navigation("Sell");
                });

            modelBuilder.Entity("Payments.Domain.Entities.PostponedPaymentInfo", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Payments.Domain.Entities.Transaction", b =>
                {
                    b.Navigation("PlaidTransfers");
                });
#pragma warning restore 612, 618
        }
    }
}
